require('dotenv').config();
const express = require('express');
const mongoose = require('mongoose');
const cron = require('node-cron');
const TelegramBot = require('node-telegram-bot-api');
const Author = require('./models/Author.js');
const Post = require('./models/Post.js');
const { getInstagramPosts, getInstagramProfile } = require('./services/parser.js'); // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±–µ —Ñ—É–Ω–∫—Ü–∏–∏
const { rewriteScript } = require('./services/ai.js');
const { calculateVirality, forecastViews } = require('./services/analytics.js');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
const token = process.env.TELEGRAM_BOT_TOKEN;
const chatId = process.env.TELEGRAM_CHAT_ID;
let bot;
if (token && chatId) {
    bot = new TelegramBot(token);
    console.log('ü§ñ –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.');
} else {
    console.warn('‚ö†Ô∏è  –¢–æ–∫–µ–Ω –∏–ª–∏ ID —á–∞—Ç–∞ –¥–ª—è –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
}

const app = express();
const port = process.env.PORT || 3000;

app.use(express.json());
app.use(express.static('public'));

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
async function parseAllAuthors() {
    console.log('[AUTO-PARSE] –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Å–µ—Ö –∞–≤—Ç–æ—Ä–æ–≤...');
    const authors = await Author.find();
    if (!authors || authors.length === 0) {
        console.log('[AUTO-PARSE] –ê–≤—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ.');
        return;
    }

    for (const author of authors) {
        try {
            console.log(`[AUTO-PARSE] –ü–∞—Ä—Å–∏–Ω–≥ –∞–≤—Ç–æ—Ä–∞: ${author.nickname}`);

            // 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
            const profileData = await getInstagramProfile(author.nickname);
            if (profileData && profileData.followersCount) {
                author.subscribers = profileData.followersCount;
                await author.save();
                console.log(`[DATABASE] –û–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –¥–ª—è ${author.nickname}: ${author.subscribers}`);
            }

            // 2. –ü–æ–ª—É—á–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç—ã
            const allPosts = await getInstagramPosts(author.link);
            if (!allPosts || allPosts.length === 0) continue;

            const videoPosts = allPosts.filter(post => post.type !== 'Image');
            if (videoPosts.length === 0) continue;

            for (const postData of videoPosts) {
                const existingPost = await Post.findOne({ shortCode: postData.shortCode });
                if (!existingPost) {
                    const newPost = new Post({
                        ownerId: postData.ownerId, shortCode: postData.shortCode, url: postData.url,
                        caption: postData.caption, likesCount: postData.likesCount, commentsCount: postData.commentsCount,
                        viewsCount: postData.videoPlayCount || 0, timestamp: new Date(postData.timestamp), author: author._id,
                        metricsHistory: [{ likes: postData.likesCount, comments: postData.commentsCount, views: postData.videoPlayCount || 0 }]
                    });
                    await newPost.save();
                } else {
                    existingPost.likesCount = postData.likesCount;
                    existingPost.commentsCount = postData.commentsCount;
                    existingPost.viewsCount = postData.videoPlayCount || 0;
                    if (!existingPost.metricsHistory) { existingPost.metricsHistory = []; }
                    existingPost.metricsHistory.push({
                        likes: postData.likesCount, comments: postData.commentsCount, views: postData.videoPlayCount || 0
                    });
                    await existingPost.save();
                }
            }
        } catch (e) {
            console.error(`[AUTO-PARSE] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∞–≤—Ç–æ—Ä–∞ ${author.nickname}:`, e.message);
        }
    }
    console.log('[AUTO-PARSE] –ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –∞–≤—Ç–æ—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω.');
    
    // –ê–Ω–∞–ª–∏–∑ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞
    if (bot) {
        // ... (–∑–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –±–æ—Ç–æ–º)
    }
}

// –°—Ç–∞—Ä—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function startApp() {
  try {
    const DB_URL = process.env.DB_URL;
    if (!DB_URL) { throw new Error('–û–®–ò–ë–ö–ê: DB_URL –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à .env —Ñ–∞–π–ª.'); }
    await mongoose.connect(DB_URL);
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞!');
    app.listen(port, () => {
      console.log(`üöÄ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${port}`);
      cron.schedule('0 * * * *', () => {
          parseAllAuthors();
      });
      console.log('üïí –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –µ–∂–µ—á–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.');
    });
  } catch (e) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', e.message);
  }
}

// –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã
app.get('/authors', async (req, res) => {
    try { const authors = await Author.find(); res.json(authors); } catch (e) { res.status(500).json(e); }
});

app.get('/posts', async (req, res) => {
    try { const posts = await Post.find().sort({ timestamp: -1 }); res.json(posts); } catch (e) { res.status(500).json(e); }
});

app.post('/authors', async (req, res) => {
    try { const { name, nickname, link } = req.body; const author = await Author.create({ name, nickname, link }); res.status(201).json(author); } catch (e) { res.status(500).json(e); }
});

app.post('/parse-all', (req, res) => {
    parseAllAuthors();
    res.json({ message: "–ú–∞—Å—Å–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ." });
});

app.post('/rewrite', async (req, res) => {
    try {
        const { text } = req.body;
        if (!text) { return res.status(400).json({ message: "–¢–µ–∫—Å—Ç –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω" }); }
        const rewrittenText = await rewriteScript(text);
        res.json({ rewrittenText: rewrittenText });
    } catch (error) {
        res.status(500).json({ message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏–∏' });
    }
});

startApp();