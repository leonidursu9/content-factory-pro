require('dotenv').config();
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const cron = require('node-cron');

// –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥–µ–ª–µ–π
const Author = require('./models/Author.js');
const Post = require('./models/Post.js');
const Script = require('./models/Script.js');
const Idea = require('./models/Idea.js');
const User = require('./models/User.js');
const SystemStatus = require('./models/SystemStatus.js'); // <-- –î–û–ë–ê–í–ò–õ–ò –ù–û–í–£–Æ –ú–û–î–ï–õ–¨

// ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–∞–∫–∏–º –∂–µ)

const app = express();
const port = process.env.PORT || 3000;
const ADMIN_USER_ID = '68dbe08523a46aeb44dec6e6';
const MAX_AUTHORS_LIMIT = 30;
let isParserEnabled = true;
let isParsing = false;
const delay = ms => new Promise(res => setTimeout(res, ms));

app.use(cors());
app.use(express.json());

// --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ---
async function updateLastParseLog(type) {
    const log = { type, timestamp: new Date() };
    console.log(`[LOG] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ä—Å–µ—Ä–∞: ${type}`);
    await SystemStatus.findOneAndUpdate(
        { key: 'lastParseLog' },
        { value: log },
        { upsert: true } // –°–æ–∑–¥–∞—Å—Ç –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    );
}


async function updateAuthorProfile(author, type = '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π (–ü—Ä–æ—Ñ–∏–ª–∏)') { 
    try { 
        console.log(`[–ü–†–û–§–ò–õ–¨] –û–±–Ω–æ–≤–ª—è—é –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è ${author.nickname}`); 
        const profileData = await getInstagramProfile(author.nickname); 
        if (profileData) { 
            author.name = profileData.fullName || author.nickname; 
            author.subscribers = profileData.followersCount; 
            author.instagramUserId = profileData.instagramUserId; 
            author.subscribersHistory.push({ count: profileData.followersCount, timestamp: new Date() }); 
            await author.save(); 
            await updateLastParseLog(type);
        } 
    } catch (e) { console.error(`[–ü–†–û–§–ò–õ–¨] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${author.nickname}:`, e.message); throw e; } 
}

async function scrapePostsForAuthor(author, limit = 15, type = '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π (–ü–æ—Å—Ç—ã)') {
    console.log(`[–ü–û–°–¢–´] –ò—â—É ${limit} –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è ${author.nickname}...`);
    try {
        const postsData = await getInstagramPosts(author, limit);
        for (const postData of postsData) {
            if (!postData.mediaId) continue;
            let post = await Post.findOne({ mediaId: postData.mediaId, user: ADMIN_USER_ID });
            if (!post) {
                post = new Post({ mediaId: postData.mediaId, user: ADMIN_USER_ID, author: author._id, caption: postData.caption, url: postData.url, timestamp: new Date(postData.timestamp), metricsHistory: [{ views: postData.viewCount, likes: postData.likeCount, comments: postData.commentCount, timestamp: new Date() }] });
            } else {
                post.metricsHistory.push({ views: postData.viewCount, likes: postData.likeCount, comments: postData.commentCount, timestamp: new Date() });
            }
            post.viewsCount = postData.viewCount;
            post.likesCount = postData.likeCount;
            post.commentsCount = postData.commentCount;
            const updatedAuthor = await Author.findById(author._id);
            const { score: virality } = calculateVirality(post, updatedAuthor);
            post.viralCoefficient = virality;
            await post.save();
        }
        await updateLastParseLog(type);
    } catch (e) { console.error(`[–ü–û–°–¢–´] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –ø–æ—Å—Ç–æ–≤ –¥–ª—è ${author.nickname}:`, e.message); throw e; }
}

// ... (–≤–µ—Å—å –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ API-–º–∞—Ä—à—Ä—É—Ç–æ–≤ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∫—Ä–æ–º–µ /settings/status)

// --- –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ú–ê–†–®–†–£–¢ ---
app.get('/settings/status', async (req, res) => {
    try {
        const currentAuthors = await Author.countDocuments({ user: ADMIN_USER_ID });
        const notifications = [];

        const parserUsed = currentAuthors * 100;
        const parserTotal = 50000;
        if (parserUsed / parserTotal > 0.9) {
            notifications.push({ type: 'error', service: '–ü–∞—Ä—Å–µ—Ä (RapidAPI)', message: '–õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –∏—Å—á–µ—Ä–ø–∞–Ω!' });
        }

        const transcriberUsed = 15;
        const transcriberTotal = 120;
        if (transcriberUsed / transcriberTotal > 0.9) {
            notifications.push({ type: 'error', service: '–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è (Apify)', message: '–õ–∏–º–∏—Ç –º–∏–Ω—É—Ç —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –∏—Å—á–µ—Ä–ø–∞–Ω!' });
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const lastParseStatus = await SystemStatus.findOne({ key: 'lastParseLog' });
        const lastParse = lastParseStatus ? lastParseStatus.value : { type: '–ï—â–µ –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª—Å—è', timestamp: null };

        const status = {
            parserSettings: { isEnabled: isParserEnabled, currentAuthors, maxAuthors: MAX_AUTHORS_LIMIT },
            lastParse: lastParse,
            notifications: notifications
        };
        res.json(status);
    } catch (e) {
        res.status(500).json({ message: e.message });
    }
});


// ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ CRON-–∑–∞–¥–∞—á –∏ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–∞–∫–∏–º –∂–µ, –Ω–æ —Å –≤—ã–∑–æ–≤–æ–º updateLastParseLog)

cron.schedule('0 */8 * * *', async () => { if (isParsing || !isParserEnabled) return; isParsing = true; try { console.log('[CRON] –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤...'); const authors = await Author.find({ user: ADMIN_USER_ID }); for (const author of authors) { await scrapePostsForAuthor(author, 15, '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π (–ü–æ—Å—Ç—ã)'); await delay(5000); } console.log('[CRON] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.'); } catch(e) { console.error("–û—à–∏–±–∫–∞ –≤ CRON-–∑–∞–¥–∞—á–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤:", e); } finally { isParsing = false; } });
cron.schedule('0 0 * * *', async () => { if (isParsing || !isParserEnabled) return; isParsing = true; try { console.log('[CRON] –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π...'); const authors = await Author.find({ user: ADMIN_USER_ID }); for (const author of authors) { await updateAuthorProfile(author, '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π (–ü—Ä–æ—Ñ–∏–ª–∏)'); await delay(5000); } console.log('[CRON] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ.'); } catch(e) { console.error("–û—à–∏–±–∫–∞ –≤ CRON-–∑–∞–¥–∞—á–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π:", e); } finally { isParsing = false; } });
cron.schedule('0 2 * * *', async () => { if (!isParserEnabled) return; console.log('[CRON-–ò–î–ï–ò] –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏...'); try { const sevenDaysAgo = new Date(); sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7); const recentPosts = await Post.find({ timestamp: { $gte: sevenDaysAgo }, user: ADMIN_USER_ID }).populate('author'); recentPosts.sort((a, b) => (b.viralCoefficient || 0) - (a.viralCoefficient || 0)); const topPosts = recentPosts.slice(0, 5); if (topPosts.length === 0) { console.log('[CRON-–ò–î–ï–ò] –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∏—Ä–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.'); await updateLastParseLog('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π (–ò–¥–µ–∏)'); return; } for (const post of topPosts) { const existingIdea = await Idea.findOne({ mediaId: post.mediaId, user: ADMIN_USER_ID }); if (existingIdea && existingIdea.transcript && !existingIdea.transcript.includes('–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å')) continue; console.log(`[CRON-–ò–î–ï–ò] –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é —Ç–æ–ø-–ø–æ—Å—Ç: ${post.url}`); const garbledTranscript = await transcribeVideo(post.url); await delay(10000); const finalTranscript = await correctTranscript(post.caption, garbledTranscript); const ideaData = { mediaId: post.mediaId, caption: post.caption, url: post.url, user: ADMIN_USER_ID, originalAuthor: post.author ? post.author.nickname : '?', postId: post._id, transcript: finalTranscript }; await Idea.findOneAndUpdate({ mediaId: post.mediaId, user: ADMIN_USER_ID }, ideaData, { upsert: true }); console.log(`[CRON-–ò–î–ï–ò] –ò–¥–µ—è –¥–ª—è –ø–æ—Å—Ç–∞ ${post.mediaId} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º.`); await delay(10000); } await updateLastParseLog('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π (–ò–¥–µ–∏)'); console.log('[CRON-–ò–î–ï–ò] –†–∞–±–æ—Ç–∞ –∫–æ–Ω–≤–µ–π–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.'); } catch (e) { console.error('[CRON-–ò–î–ï–ò] –û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –∫–æ–Ω–≤–µ–π–µ—Ä–∞:', e.message); } });

async function startApp() { try { await mongoose.connect(process.env.DB_URL); console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞!'); app.listen(port, () => console.log(`üöÄ –ë—ç–∫–µ–Ω–¥ –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${port}`)); } catch (e) { console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', e.message); } }
startApp();