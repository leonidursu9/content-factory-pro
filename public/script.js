document.addEventListener('DOMContentLoaded', () => {
    const addButton = document.getElementById('add-button');
    const nicknameInput = document.getElementById('nickname-input');
    const linkInput = document.getElementById('link-input');
    const authorsList = document.getElementById('authors-list');
    const postsList = document.getElementById('posts-list');
    const updateAllButton = document.getElementById('update-all-button'); // <-- –†–∞–±–æ—Ç–∞–µ–º —Å —ç—Ç–æ–π –∫–Ω–æ–ø–∫–æ–π

    const fetchAuthors = async () => {
        try {
            const response = await fetch('/authors');
            const authors = await response.json();
            authorsList.innerHTML = '';
            authors.forEach(author => {
                const authorCard = document.createElement('div');
                authorCard.className = 'author-card';
                const displayName = author.name || author.nickname;
                authorCard.innerHTML = `
                    <p><strong>–ò–º—è:</strong> ${displayName}</p>
                    <p><strong>–ù–∏–∫–Ω–µ–π–º:</strong> ${author.nickname}</p>
                    <p><strong>–ü–æ–¥–ø–∏—Å—á–∏–∫–∏:</strong> ${author.subscribers || 0}</p>
                    <a href="${author.link}" target="_blank">–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å</a>
                `;
                authorsList.appendChild(authorCard);
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–≤—Ç–æ—Ä–æ–≤:', error);
            authorsList.innerHTML = '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–≤—Ç–æ—Ä–æ–≤.';
        }
    };
    
    const fetchPosts = async () => {
        try {
            const response = await fetch('/posts');
            const posts = await response.json();
            postsList.innerHTML = '';
            posts.forEach(post => {
                const postCard = document.createElement('div');
                postCard.className = 'post-card';
                postCard.innerHTML = `
                    <p><strong>–ö—Ä—é—á–æ–∫:</strong> ${post.caption ? post.caption.substring(0, 150) : '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}...</p>
                    <p>‚ù§Ô∏è ${post.likesCount} | üí¨ ${post.commentsCount} | ‚ñ∂Ô∏è ${post.viewsCount || 0}</p>
                    <a href="${post.url}" target="_blank">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å</a>
                    <button class="rewrite-button" data-caption="${escape(post.caption || '')}">–ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π</button>
                    <div class="rewritten-script" style="display:none; margin-top:10px; background-color: #e7f3ff; padding: 10px; border-radius: 5px; white-space: pre-wrap;"></div>
                `;
                postsList.appendChild(postCard);
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Å—Ç–æ–≤:', error);
            postsList.innerHTML = '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å—Ç—ã.';
        }
    };
    
    addButton.addEventListener('click', async () => {
        if (!nicknameInput.value || !linkInput.value) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.');
            return;
        }
        const authorData = {
            name: nicknameInput.value,
            nickname: nicknameInput.value,
            link: linkInput.value,
        };
        try {
            const response = await fetch('/authors', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(authorData)
            });
            if (response.ok) {
                nicknameInput.value = '';
                linkInput.value = '';
                fetchAuthors();
            } else {
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–≤—Ç–æ—Ä–∞.');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞:', error);
            alert('–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞.');
        }
    });

    updateAllButton.addEventListener('click', async () => {
        updateAllButton.innerText = '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...';
        updateAllButton.disabled = true;
        try {
            const response = await fetch('/parse-all', { method: 'POST' });
            if (response.ok) {
                alert('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω–æ! –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ –æ–±–Ω–æ–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.');
                setTimeout(fetchPosts, 60000); 
            } else {
                alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.');
            }
        } catch (error) {
            alert('–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞.');
        } finally {
            updateAllButton.innerText = '–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Å–µ–º –ø–æ—Å—Ç–∞–º';
            updateAllButton.disabled = false;
        }
    });

    postsList.addEventListener('click', async (event) => {
        if (event.target.classList.contains('rewrite-button')) {
            const button = event.target;
            const caption = unescape(button.getAttribute('data-caption'));
            const scriptContainer = button.nextElementSibling;
            
            button.innerText = '–î—É–º–∞—é...';
            button.disabled = true;

            try {
                const response = await fetch('/rewrite', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ text: caption })
                });
                const data = await response.json();

                if (response.ok) {
                    scriptContainer.innerText = data.rewrittenText;
                    scriptContainer.style.display = 'block';
                    button.style.display = 'none';
                } else {
                    scriptContainer.innerText = '–û—à–∏–±–∫–∞: ' + data.message;
                    scriptContainer.style.display = 'block';
                    button.innerText = '–ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π';
                    button.disabled = false;
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏–∏:', error);
                alert('–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏–∏.');
                button.innerText = '–ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π';
                button.disabled = false;
            }
        }
    });
    
    fetchAuthors();
    fetchPosts();
});