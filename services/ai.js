// ФАЙЛ: services/ai.js (ФИНАЛЬНАЯ ИСПРАВЛЕННАЯ ВЕРСИЯ НА AXIOS)

require('dotenv').config();
const axios = require('axios'); // ИСПОЛЬЗУЕМ AXIOS

const RAPIDAPI_KEY = process.env.RAPIDAPI_KEY; 
const API_URL = 'https://gemini-pro-ai.p.rapidapi.com/';
const API_HOST = 'gemini-pro-ai.p.rapidapi.com';

// Общая функция для отправки запросов к Gemini API с использованием Axios
async function callGeminiAPI(prompt) {
    if (!RAPIDAPI_KEY) {
        throw new Error("RAPIDAPI_KEY не найден в файле .env.");
    }

    const payload = {
        contents: [
            {
                role: 'user',
                parts: [{ text: prompt }]
            }
        ]
    };

    const config = {
        method: 'POST',
        url: API_URL,
        headers: {
            'x-rapidapi-key': RAPIDAPI_KEY,
            'x-rapidapi-host': API_HOST,
            'Content-Type': 'application/json'
        },
        data: payload // Axios сам правильно преобразует объект в JSON
    };

    try {
        // ИСПОЛЬЗУЕМ УНИВЕРСАЛЬНЫЙ МЕТОД axios(config) ДЛЯ НАДЕЖНОСТИ
        const response = await axios(config);
        const data = response.data;

        const resultText = data?.candidates?.[0]?.content?.parts?.[0]?.text;
        
        if (resultText) {
            return resultText;
        } else {
            console.error("[RapidAPI Gemini] Неожиданный формат ответа:", data);
            throw new Error('Не удалось найти текст в ответе Gemini API.');
        }
    } catch (error) {
        const errorDetails = error.response ? error.response.data : error.message;
        console.error("[RapidAPI Gemini] Критическая ошибка:", errorDetails);
        throw new Error(`Критическая ошибка при обращении к Gemini API.`);
    }
}

// Функция для создания сценариев
async function rewriteScript(originalText) {
    const prompt = `
        [РОЛЬ]: Ты — "Креатор Вирусного Контента по Новостройкам Краснодара". Твоя личность: Надежный, веселый и харизматичный эксперт с острым чувством юмора, но с глубочайшим знанием рынка (ФЗ-214, особенности ДДУ, социальные проблемы новых районов и тому подобное). Твоя задача — говорить с потенциальными клиентами на простом, энергичном языке.
        [КОНТЕКСТ]: Мы работаем на высококонкурентном рынке новостроек Краснодара, цель — привлечение клиентов (инвесторов, семей по льготной ипотеке, переселенцев). Мои уникальные торговые предложения (УТП) – это возможность покупки жилья без первоначального взноса, только за счет Материнского Капитала, и в семейную ипотеку от 2,5%.
        [ЦЕЛЬ/МИССИЯ]: Проведи глубокий анализ предоставленного видеоролика, определи его "секрет виральности", а затем создай новый, улучшенный, 100% виральный сценарий, адаптированный под специфику Краснодара и мои УТП. Конечный результат должен быть сразу готов к съемке.
        [МЕТОДОЛОГИЯ/АЛГОРИТМ: СИСТЕМА УСИЛЕНИЯ]
        Выполняй работу строго по шагам:
        1. АНАЛИЗ УСПЕХА: Определи ключевой "хук" и "боль" в видео конкурента. Выяви 3 главных элемента, которые сделали его виральным (эмоция, формат, информация).
        2. АДАПТАЦИЯ К КРАСНОДАРУ: Переведи все общие концепции в конкретные и острые проблемы/преимущества Краснодара. (Например: если речь о "пробках", назови конкретный проблемный район – "Московская/Восточно-Кругликовская").
        3. ИНТЕГРАЦИЯ УТП: Впиши мое ключевое преимущество (например, "квартира без ПВ") в "Решение" или "Закрытие возражения" так, чтобы это звучало как шок-контент или неоспоримый факт.
        4. СОЗДАНИЕ ХУКА (0-3 сек): Сгенерируй 3 варианта мощного, эмоционального хука для начала видео, который гарантированно заставит целевую аудиторию остановиться (особенно: иногородних, семьи, и тех, кто считает, что им "не светит" ипотека).
        5. НАПИСАНИЕ ФИНАЛЬНОГО СЦЕНАРИЯ: Собери все в единый, динамичный сценарий.
        [ПРАВИЛА/ОГРАНИЧЕНИЯ]
        * ИЗБЕГАТЬ: Скучных фраз, сухой статистики, занудства, сложного юридического языка.
        * ОБЯЗАТЕЛЬНО: Использовать юмор, сленг, эмоции. Говорить о реальных проблемах (школы, поликлиники, трафик), чтобы завоевать доверие.
        * ФОКУС: Каждый сценарий должен быть нацелен либо на опровержение мифа, либо на демонстрацию шокирующей возможности (например, как купить без ПВ).
        [ФОРМАТ ВЫВОДА]: Выдай результат в следующем структурированном виде:
        ***
        **[СЦЕНАРИЙ УСИЛЕНИЯ: Название по теме конкурента]**
        **1. АНАЛИЗ ВИРАЛЬНОСТИ (КОНКУРЕНТ):**
        * *Хук:* [Краткое описание хука и его силы]
        * *Боль:* [Какую основную "боль" закрыли]
        * *Секрет успеха:* [1-2 предложения]
        **2. 3 ВАРИАНТА УСИЛЕННЫХ ХУКОВ (0-3 сек):**
        1. *[Вариант 1 - Шокирующий Факт]*
        2. *[Вариант 2 - Эмоциональный вопрос]*
        3. *[Вариант 3 - Юмор/Контраст]*
        **3. ФИНАЛЬНЫЙ СЦЕНАРИЙ (Готов к съемке):**
        * **ХУК (0-3 сек):** [Выбранный лучший вариант]
        * **БОЛЬ/МИФ (4-10 сек):** [Адаптация боли под Краснодар – пробки, недостаток школ, дороговизна]
        * **РЕШЕНИЕ (11-20 сек):** [Демонстрация ЖК или возможности, с обязательной интеграцией УТП: "Как купить без ПВ/за мат. капитал"]
        * **ПРИЗЫВ К ДЕЙСТВИЮ (21-30 сек):** [Четкое, юморное и личное обращение, например: "Пиши в Директ "Ключи" — и я расскажу, как переехать к морю, даже если банк послал тебя с нулем."]
        
        ОРИГИНАЛЬНЫЙ ТЕКСТ ДЛЯ АДАПТАЦИИ:
        """
        ${originalText}
        """
    `;
    return await callGeminiAPI(prompt);
}

// Функция для улучшения сценариев
async function refineScript(scriptToRefine) {
    const prompt = `
        [РОЛЬ]: Ты - "Редактор-усилитель". Твоя задача - взять готовый сценарий и сделать его еще более агрессивным, продающим и цепляющим.
        [ЗАДАЧА]: Возьми СЦЕНАРИЙ ДЛЯ УЛУЧШЕНИЯ, и перепиши его. Добавь более сильный, возможно провокационный, хук. Сделай призыв к действию более срочным и конкретным. Усиль эмоции. Не меняй основную структуру, только усиливай текст.

        СЦЕНАРИЙ ДЛЯ УЛУЧШЕНИЯ:
        """
        ${scriptToRefine}
        """
    `;
    return await callGeminiAPI(prompt);
}

// Новая функция "умного редактора" для исправления транскриптов
async function correctTranscript(postCaption, garbledTranscript) {
    if (!garbledTranscript) {
        return 'Транскрибация не удалась или в видео нет речи.';
    }

    const prompt = `
        [РОЛЬ]: Ты — "AI-Редактор".
        [КОНТЕКСТ]: У меня есть два источника информации о видео: 1) Качественное описание к посту, написанное человеком. 2) Очень некачественный, "рваный" текст, автоматически распознанный из видео.
        [ЗАДАЧА]: Используя качественное ОПИСАНИЕ ПОСТА как главный ориентир по теме и смыслу, исправь и восстанови РВАНЫЙ ТЕКСТ. Преврати его в связный, читаемый текст, который, скорее всего, и был произнесен в видео. Убери обрывки слов, исправь ошибки, но старайся не выдумывать ничего лишнего, а лишь восстанавливать логику на основе двух источников.

        [КАЧЕСТВЕННОЕ ОПИСАНИЕ ПОСТА]:
        """
        ${postCaption}
        """

        [РВАНЫЙ ТЕКСТ ИЗ ВИДЕО]:
        """
        ${garbledTranscript}
        """

        [ИСПРАВЛЕННЫЙ ТЕКСТ]:
    `;

    console.log('[AI-EDITOR] Отправляю текст на исправление в Gemini...');
    return await callGeminiAPI(prompt);
}

module.exports = { rewriteScript, refineScript, correctTranscript };